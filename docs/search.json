[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 indicatorrecode authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evangeline Reynolds. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reynolds E (2023). ind2cat: Translate Indicator Variables Categorical Variables. R package version 0.0.0.9000.","code":"@Manual{,   title = {ind2cat: Translate from an Indicator Variables to Categorical Variables},   author = {Evangeline Reynolds},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"abstract","dir":"","previous_headings":"","what":"Translate from an Indicator Variables to Categorical Variables","title":"Translate from an Indicator Variables to Categorical Variables","text":"Indicator variables easy create, store, interpret [@10.1177/1536867X19830921]. concisely encode information presence condition observational units. variable name encapsulates information condition interest, variable’s values (TRUE FALSE, 1 0, “Yes” “”) indicate condition met observational unit. using indicator variables use summary products, analysts often make choice using indicator variable -crafting categorical variables values can directly interpreted. Using indicator variable -may motivated time savings, yields poor results summary products. {{ind2cat}} can help analysts concisely translate indicator variables categorical variables reporting products, yielding polished outputs. default, ind2cat creates categorical variable indicator variable name, resulting light weight syntax.","code":""},{"path":[]},{"path":"/index.html","id":"disclosures","dir":"","previous_headings":"","what":"disclosures","title":"Translate from an Indicator Variables to Categorical Variables","text":"ind2cat experimental ’m sure already solution unsure fundamental problems approach","code":""},{"path":"/index.html","id":"to-do-to-move-ind2cat-out-of-proof-of-concept-phase","dir":"","previous_headings":"","what":"to do to move ind2cat out of proof of concept phase","title":"Translate from an Indicator Variables to Categorical Variables","text":"change Rlang grabbing function name (Claus Wilke) left join instead ifelse make code performant (Emily Rederer) make “Y” “N” lot stricter - right now ’re assuming ton! Danger.","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Translate from an Indicator Variables to Categorical Variables","text":"Using current analytic tools analysts make choice directly using indicators verbose recode. Current procedures recoding indicator variables categorical variable repetitive, forgoing recode using indicator variables directly yields hard--interpret summary products. demonstrated analyst might current recode indicator variable; method repetitive:  solution also address category display ordering; ordering products alphabetical reflect F/T order source variable. additional step reflect source variable, using function like forcats::fct_rev, may required consistency reporting.  Given verbose recoding can , analyst may choose forego recoding variable, especially exploratory analysis. However, indicator variables used directly data summary products like tables visuals, information often awkwardly displayed sometimes lost. , column header comes indicator variable name allowing savvy readers interpret output, interpretation awkward: following two-way table, information completely lost due using indicator variable directly: following visual summary data, indicator variable directly used, interpretation awkward.   . Bar labels + axis label preserves information awkward used faceting variable ggplot2 library, information lost graph directly interpretable.   D. Facetting directly indicator variable popular ggplot2 results information loss","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.0     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.1     ✔ tibble    3.2.0 #> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.1      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors tidytitanic::passengers %>%    tibble() %>%    mutate(cat_survived = ifelse(survived,                                 \"survived\",                                 \"not survived\"),           .before = 1) #> # A tibble: 1,313 × 6 #>    cat_survived name                                   class   age sex   survi…¹ #>    <chr>        <chr>                                  <chr> <dbl> <chr>   <int> #>  1 survived     Allen, Miss Elisabeth Walton           1st   29    fema…       1 #>  2 not survived Allison, Miss Helen Loraine            1st    2    fema…       0 #>  3 not survived Allison, Mr Hudson Joshua Creighton    1st   30    male        0 #>  4 not survived Allison, Mrs Hudson JC (Bessie Waldo … 1st   25    fema…       0 #>  5 survived     Allison, Master Hudson Trevor          1st    0.92 male        1 #>  6 survived     Anderson, Mr Harry                     1st   47    male        1 #>  7 survived     Andrews, Miss Kornelia Theodosia       1st   63    fema…       1 #>  8 not survived Andrews, Mr Thomas, jr                 1st   39    male        0 #>  9 survived     Appleton, Mrs Edward Dale (Charlotte … 1st   58    fema…       1 #> 10 not survived Artagaveytia, Mr Ramon                 1st   71    male        0 #> # … with 1,303 more rows, and abbreviated variable name ¹​survived tidytitanic::passengers %>%  ggplot() +    aes(x = sex) +    geom_bar() +    facet_grid(~ ifelse(survived,                        \"survived\",                        \"not survived\")) data.frame(ind_daytime = c(T, F, T, T)) %>%      mutate(cat_survived = ifelse(ind_daytime, \"daytime\", \"not daytime\")) %>%    mutate(cat_survived = fct_rev(cat_survived)) %>%    ggplot() +    aes(x = cat_survived) +    geom_bar() tidytitanic::passengers %>%    count(survived)  #>   survived   n #> 1        0 863 #> 2        1 450 tidytitanic::passengers %>%    janitor::tabyl(sex, survived) #>     sex   0   1 #>  female 154 308 #>    male 709 142 library(tidyverse)  tidytitanic::passengers %>%    ggplot() +    aes(x = survived) +    geom_bar() tidytitanic::passengers %>%  ggplot() +    aes(x = age) +    geom_histogram() +    facet_grid(~ survived) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 557 rows containing non-finite values (`stat_bin()`)."},{"path":"/index.html","id":"introducing-ind2catind_recode","dir":"","previous_headings":"","what":"Introducing ind2cat::ind_recode","title":"Translate from an Indicator Variables to Categorical Variables","text":"ind2cat::ind_recode() function uses variable name automatically derive human-readable, appropriately ordered categories. clearly compare new method, reiterate status quo toy example: contrast use ind2cat’s ind_recode function avoids repetition creating categories based indicator variable name. Using function ind_recode(), can accomplish task shown succinctly: indicator variable can populated TRUE/FALSE values well 1/0 “Yes”/“” (variants ‘y/n’ example). Furthermore, ind_recode default functionality allows analysts move first-cut human-readable recode, also allows fully customized categories via adjustment functions parameters. cat_true character string string used place T/1/“Yes” categorical variable output, NULL category automatically generated variable name negator character string used create cat_false cat_false NULL, default ‘’ cat_false character string string used place F/0/“” categorical variable output, NULL category automatically generated cat_true negator rev logical indicating order reversed F/T ordering indicator source variable, default FALSE var_prefix character string ignored creating categorical variable","code":"library(tidyverse)  data.frame(ind_graduated =               c(TRUE, TRUE, FALSE))  %>%    mutate(cat_graduated  =             ifelse(ind_graduated,                    \"graduated\",                    \"not graduated\"))  %>%    mutate(cat_graduated =             fct_rev(cat_graduated)          )   #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE not graduated library(ind2cat)  data.frame(ind_graduated =               c(TRUE, TRUE, FALSE)) %>%    mutate(cat_graduated  =             ind_recode(ind_graduated)          ) #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE not graduated data.frame(ind_graduated = c(T,T,F)) %>%    mutate(cat_graduated  = ind_recode(ind_graduated,                                       cat_false = \"current\")) #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE       current tibble(ind_grad = c(\"y\", \"n\")) %>%   mutate(cat_grad  = ind_recode(ind_grad,                                  cat_true = \"graduated\")) #> # A tibble: 2 × 2 #>   ind_grad cat_grad      #>   <chr>    <fct>         #> 1 y        graduated     #> 2 n        not graduated tibble(ind_grad = c(T,T,F)) %>%   mutate(cat_grad  = ind_recode(ind_grad, negator = \"didn't\")) #> # A tibble: 3 × 2 #>   ind_grad cat_grad    #>   <lgl>    <fct>       #> 1 TRUE     grad        #> 2 TRUE     grad        #> 3 FALSE    didn't grad tibble(ind_grad = c(\"Y\", \"N\")) %>%   mutate(cat_grad  = ind_recode(ind_grad, cat_false = \"enrolled\")) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 Y        grad     #> 2 N        enrolled tibble(ind_grad = c(\"yes\", \"no\")) %>%   mutate(cat_grad  = ind_recode(ind_grad, rev = TRUE)) %>%    mutate(cat_grad_num = as.numeric(cat_grad)) #> # A tibble: 2 × 3 #>   ind_grad cat_grad cat_grad_num #>   <chr>    <fct>           <dbl> #> 1 yes      grad                1 #> 2 no       not grad            2 tibble(dummy_grad = c(0,0,1,1,1 ,0 ,0)) %>%   mutate(cat_grad  = ind_recode(dummy_grad, var_prefix = \"dummy_\")) #> # A tibble: 7 × 2 #>   dummy_grad cat_grad #>        <dbl> <fct>    #> 1          0 not grad #> 2          0 not grad #> 3          1 grad     #> 4          1 grad     #> 5          1 grad     #> 6          0 not grad #> 7          0 not grad"},{"path":"/index.html","id":"use-in-data-products-like-figures-and-tables","dir":"","previous_headings":"","what":"Use in data products like figures and tables","title":"Translate from an Indicator Variables to Categorical Variables","text":"follows, show ind2cat’s use summary products, main motivation ind2cat.","code":"tidytitanic::passengers %>%  ggplot() +    aes(x = ind_recode(survived)) +    geom_bar() # or last_plot() +   aes(x = ind_recode(survived, cat_false = \"perished\")) # or last_plot() +   aes(x = ind_recode(survived, cat_false = \"didn't\", rev = T)) +    labs(x = NULL) tidytitanic::passengers %>%  ggplot() +    aes(x = sex) +    geom_bar() +    facet_grid(~ ind_recode(survived)) tidytitanic::passengers %>%   mutate(cat_survived = ind_recode(survived)) %>%    janitor::tabyl(sex, cat_survived) %>%    janitor::adorn_percentages() %>%    janitor::adorn_pct_formatting() %>%    janitor::adorn_ns(position = \"rear\") #>     sex not survived    survived #>  female  33.3% (154) 66.7% (308) #>    male  83.3% (709) 16.7% (142)"},{"path":[]},{"path":"/index.html","id":"implementation-details","dir":"","previous_headings":"","what":"Implementation details","title":"Translate from an Indicator Variables to Categorical Variables","text":"","code":"readLines(\"R/ind_recode.R\") -> implementation #' ind_recode #' #' @param var the name of an indicator variable #' @param var_prefix a character string that will be ignored when creating the categorical variable #' @param negator a character string used to create cat_false when cat_false is NULL, default is 'not' #' @param cat_true a character string string to be used place of  T/1/\"Yes\" for the categorical variable output, if NULL the category is automatically generated from the variable name #' @param cat_false a character string string to be used place of  F/0/\"No\" for the categorical variable output, if NULL the category is automatically generated from the cat true and the negator #' @param rev logical indicating if the order should be reversed from the F/T ordering of the indicator source variable, default is FALSE #' #' @return #' @export #' #' @examples #' library(tibble) #' library(dplyr) #' tibble(ind_grad = c(0,0,1,1,1 ,0 ,0)) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(TRUE,TRUE,FALSE)) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"Y\", \"N\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"y\", \"n\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"yes\", \"no\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) ind_recode <- function(var, var_prefix = \"ind_\", negator = \"not\",                        cat_true = NULL, cat_false = NULL, rev = FALSE){    if(is.null(cat_true)){     cat_true = deparse(substitute(var)) %>%   # use r lang in rewrite       stringr::str_remove(paste0(\"^\", var_prefix)) %>%       stringr::str_replace_all(\"_\", \" \")   }    if(is.null(cat_false)){     cat_false = paste(negator, cat_true)   }    # for yes/no case   if(is.character({{var}})){      my_var <- {{var}} %>% as.factor() %>% as.numeric() - 1    }else{      my_var <- {{var}}   }    if(rev){     ifelse(my_var, cat_true, cat_false) %>%       factor(levels = c(cat_true, cat_false))   }else{     ifelse(my_var, cat_true, cat_false) %>%       factor(levels = c(cat_false, cat_true))   }   }"},{"path":"/reference/ind_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"ind_recode — ind_recode","title":"ind_recode — ind_recode","text":"ind_recode","code":""},{"path":"/reference/ind_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ind_recode — ind_recode","text":"","code":"ind_recode(   var,   var_prefix = \"ind_\",   negator = \"not\",   cat_true = NULL,   cat_false = NULL,   rev = FALSE )"},{"path":"/reference/ind_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ind_recode — ind_recode","text":"var name indicator variable var_prefix character string ignored creating categorical variable negator character string used create cat_false cat_false NULL, default '' cat_true character string string used place  T/1/\"Yes\" categorical variable output, NULL category automatically generated variable name cat_false character string string used place  F/0/\"\" categorical variable output, NULL category automatically generated cat true negator rev logical indicating order reversed F/T ordering indicator source variable, default FALSE","code":""},{"path":"/reference/ind_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ind_recode — ind_recode","text":"","code":"library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tibble(ind_grad = c(0,0,1,1,1 ,0 ,0)) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 7 × 2 #>   ind_grad cat_grad #>      <dbl> <fct>    #> 1        0 not grad #> 2        0 not grad #> 3        1 grad     #> 4        1 grad     #> 5        1 grad     #> 6        0 not grad #> 7        0 not grad  tibble(ind_grad = c(TRUE,TRUE,FALSE)) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 3 × 2 #>   ind_grad cat_grad #>   <lgl>    <fct>    #> 1 TRUE     grad     #> 2 TRUE     grad     #> 3 FALSE    not grad  tibble(ind_grad = c(\"Y\", \"N\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 Y        grad     #> 2 N        not grad  tibble(ind_grad = c(\"y\", \"n\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 y        grad     #> 2 n        not grad  tibble(ind_grad = c(\"yes\", \"no\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 yes      grad     #> 2 no       not grad"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]

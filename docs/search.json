[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 indicatorrecode authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Evangeline Reynolds. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reynolds E (2023). ind2cat: Translate Indicator Variables Categorical Variables. R package version 0.0.0.9000.","code":"@Manual{,   title = {ind2cat: Translate from an Indicator Variables to Categorical Variables},   author = {Evangeline Reynolds},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":[]},{"path":[]},{"path":[]},{"path":"/index.html","id":"introducing-ind2catind_recode","dir":"","previous_headings":"","what":"Introducing ind2cat::ind_recode()!","title":"Translate from an Indicator Variables to Categorical Variables","text":"ind2cat::ind_recode concise, sensible function making human-readable data summary products indicator variables!","code":""},{"path":[]},{"path":"/index.html","id":"disclosures","dir":"","previous_headings":"","what":"disclosures","title":"Translate from an Indicator Variables to Categorical Variables","text":"ind2cat experimental ’m sure already solution","code":""},{"path":"/index.html","id":"to-do-to-move-ind2cat-to-more-robust","dir":"","previous_headings":"","what":"to do to move ind2cat to more robust","title":"Translate from an Indicator Variables to Categorical Variables","text":"change Rlang grabbing function name (Claus Wilke) left join instead ifelse make code performant (Emily Rederer) make “Y” “N” lot stricter - right now ’re assuming ton! Danger. test!","code":""},{"path":"/index.html","id":"thanks-up-front","dir":"","previous_headings":"","what":"Thanks up front","title":"Translate from an Indicator Variables to Categorical Variables","text":"Emily Rederer Kyle McDermott Claus Wilke Yihui Xie","code":""},{"path":"/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract","title":"Translate from an Indicator Variables to Categorical Variables","text":"Indicator variables easy create, store, interpret [@10.1177/1536867X19830921]. concisely encode information presence condition observational units. variable name encapsulates information condition interest, variable’s values (TRUE FALSE, 1 0, “Yes” “”) indicate condition met observational unit. using indicator variables use summary products, analysts often make choice using indicator variable -crafting categorical variables values can directly interpreted. Using indicator variable -may motivated time savings, yields poor results summary products. {{ind2cat}} can help analysts concisely translate indicator variables categorical variables reporting products, yielding polished outputs. default, ind2cat creates categorical variable indicator variable name, resulting light-weight syntax.","code":""},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Translate from an Indicator Variables to Categorical Variables","text":"Using current analytic tools, analysts make choice directly using indicator variables recoding variable first categorical. Current procedures recoding indicator variables categorical variable repetitive, forgoing recode using indicator variables directly yields hard--interpret summary products. data inspired email training data, demonstrates analyst might current recode indicator variable. method repetitive; recoding line, ‘spam’ typed four times. Likewise, data visualization products recoding can done fly, see process can repetative.  Furthermore, ifelse() approach recoding indicator variables also disadvantage consistently ordering resultant categories; ordering products alphabetical reflect F/T order source variable. additional step reflect source variable, using function like forcats::fct_rev, may required consistent reporting. show another visualization example, see specification x axis variable becomes difficult reason .  Given verbose recoding indicator variable can , analysts may choose forego recoding variable, especially exploratory analysis. However, indicator variables used directly data summary products like tables visuals, information often awkwardly displayed sometimes lost. , table created using indicator variable directly awkward interpret. indicator variable name persists output allowing savvy readers interpret output, communication strained. following two-way table produced using indicator variable directly popular janitor package, information completely lost: Likewise, following visual summary data, indicator variable directly used, interpretation awkward.   . Bar labels + axis label preserves information awkward Moreover, indicator variables used directly faceting variable plots produced popular ggplot2 library, information lost plot directly interpretable.   D. Facetting directly indicator variable popular ggplot2 results information loss","code":"library(tidyverse) data.frame(ind_spam = c(TRUE, TRUE, FALSE, FALSE, TRUE)) %>%    mutate(cat_spam = ifelse(ind_spam, \"spam\", \"not spam\")) #>   ind_spam cat_spam #> 1     TRUE     spam #> 2     TRUE     spam #> 3    FALSE not spam #> 4    FALSE not spam #> 5     TRUE     spam tidytitanic::passengers %>%  ggplot() +    aes(x = age) +    geom_histogram() +    facet_grid(~ ifelse(survived,                        \"survived\",                        \"not survived\")) data.frame(ind_grad = c(T, F, T, T)) %>%    ggplot() +    aes(x = fct_rev(ifelse(ind_grad, \"grad\", \"not grad\"))) +   geom_bar() tidytitanic::passengers %>%    count(survived)  #>   survived   n #> 1        0 863 #> 2        1 450 tidytitanic::passengers %>%    janitor::tabyl(sex, survived) #>     sex   0   1 #>  female 154 308 #>    male 709 142 library(tidyverse)  tidytitanic::passengers %>%    ggplot() +    aes(x = survived) +    geom_bar() tidytitanic::passengers %>%  ggplot() +    aes(x = age) +    geom_histogram() +    facet_grid(~ survived)"},{"path":"/index.html","id":"introducing-ind2catind_recode-1","dir":"","previous_headings":"","what":"Introducing ind2cat::ind_recode","title":"Translate from an Indicator Variables to Categorical Variables","text":"ind2cat::ind_recode() function uses indicator variable names automatically derive human-readable, appropriately ordered categories. clearly compare new method, reiterate status quo toy example: contrast use ind2cat’s ind_recode function avoids repetition creating categories based indicator variable name. Using function ind_recode(), can accomplish task shown succinctly: function ind_recode flexible, can recode variable populated TRUE/FALSE values well 1/0 “Yes”/“” (variants ‘y/n’ example). Furthermore, ind_recode default functionality allows analysts move first-cut human-readable recode, also allows fully customized categories via adjustment functions parameters. category associated ‘TRUE’ modified (default based variable name), cat_true may used follows. Note false category generated TRUE category default. Also, default negator ‘’ can changed setting negator argument. negative category independently specified, cat_false argument can set: Also, derived category’s levels reversed, .e. [1,0] instead default [0,1], rev can set TRUE. Finally, several indicator variable prefixes automatically removed default setting, includeing ind_ IND_. behavior can modified using var_prefix argument.","code":"library(tidyverse)  data.frame(ind_graduated =               c(TRUE, TRUE, FALSE))  %>%    mutate(cat_graduated  =             ifelse(ind_graduated,                    \"graduated\",                    \"not graduated\"))  %>%    mutate(cat_graduated =             fct_rev(cat_graduated)          )   #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE not graduated library(ind2cat)  data.frame(ind_graduated =               c(TRUE, TRUE, FALSE)) %>%    mutate(cat_graduated  =             ind_recode(ind_graduated)          ) #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE not graduated data.frame(ind_graduated = c(T,T,F)) %>%    mutate(cat_graduated  = ind_recode(ind_graduated,                                       cat_false = \"current\")) #>   ind_graduated cat_graduated #> 1          TRUE     graduated #> 2          TRUE     graduated #> 3         FALSE       current tibble(ind_grad = c(T,T,F)) %>%   mutate(cat_grad  = ind_recode(ind_grad, negator = \"~\")) #> # A tibble: 3 × 2 #>   ind_grad cat_grad #>   <lgl>    <fct>    #> 1 TRUE     grad     #> 2 TRUE     grad     #> 3 FALSE    ~ grad tibble(ind_grad = c(\"Y\", \"N\")) %>%   mutate(cat_grad  = ind_recode(ind_grad, cat_false = \"enrolled\")) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 Y        grad     #> 2 N        enrolled tibble(ind_grad = c(\"yes\", \"no\")) %>%   mutate(cat_grad  = ind_recode(ind_grad, rev = TRUE)) %>%    mutate(cat_grad_num = as.numeric(cat_grad)) #> # A tibble: 2 × 3 #>   ind_grad cat_grad cat_grad_num #>   <chr>    <fct>           <dbl> #> 1 yes      grad                1 #> 2 no       not grad            2 tibble(dummy_grad = c(0, 0, 1, 1, 1 ,0 ,0)) %>%   mutate(cat_grad  = ind_recode(dummy_grad,                                  var_prefix = \"dummy_\")) #> # A tibble: 7 × 2 #>   dummy_grad cat_grad #>        <dbl> <fct>    #> 1          0 not grad #> 2          0 not grad #> 3          1 grad     #> 4          1 grad     #> 5          1 grad     #> 6          0 not grad #> 7          0 not grad"},{"path":"/index.html","id":"use-in-data-products-like-figures-and-tables","dir":"","previous_headings":"","what":"Use in data products like figures and tables","title":"Translate from an Indicator Variables to Categorical Variables","text":"summary figure, show values result using ind_recode fly ggplot2. true--life analytic reporting space, analyst use labs(x = NULL) remove variable recoding specification.","code":"data.frame(ind_spam = c(TRUE, TRUE, FALSE, FALSE, FALSE)) %>%  ggplot() +    aes(x = ind_recode(ind_spam)) +    geom_bar() +   theme_gray(base_size = 15)-> p1  p1 +   aes(x = ind_recode(ind_spam, cat_true = \"suspicious\")) -> p2  p1 +   aes(x = ind_recode(ind_spam, negator = \"~\")) -> p3  p1 +   aes(x = ind_recode(ind_spam, cat_false = \"trustworthy\")) -> p4   p1 +   aes(x = ind_recode(ind_spam, rev = TRUE)) -> p5  library(patchwork)  (p1 + p2) /   (p3 + p4) /   (p5 + patchwork::plot_spacer()) tidytitanic::passengers %>%   mutate(cat_survived = ind_recode(survived,                                     cat_false = \"perished\")) %>%    janitor::tabyl(sex, cat_survived) %>%    janitor::adorn_percentages() %>%    janitor::adorn_pct_formatting() %>%    janitor::adorn_ns(position = \"rear\") #>     sex    perished    survived #>  female 33.3% (154) 66.7% (308) #>    male 83.3% (709) 16.7% (142)"},{"path":[]},{"path":"/index.html","id":"implementation-details","dir":"","previous_headings":"","what":"Implementation details","title":"Translate from an Indicator Variables to Categorical Variables","text":"","code":"readLines(\"R/ind_recode.R\") -> implementation #' ind_recode #' #' @param var the name of an indicator variable #' @param var_prefix a character string that will be ignored when creating the categorical variable #' @param negator a character string used to create cat_false when cat_false is NULL, default is 'not' #' @param cat_true a character string string to be used place of  T/1/\"Yes\" for the categorical variable output, if NULL the category is automatically generated from the variable name #' @param cat_false a character string string to be used place of  F/0/\"No\" for the categorical variable output, if NULL the category is automatically generated from the cat true and the negator #' @param rev logical indicating if the order should be reversed from the F/T ordering of the indicator source variable, default is FALSE #' #' @return #' @export #' #' @examples #' library(tibble) #' library(dplyr) #' tibble(ind_grad = c(0,0,1,1,1 ,0 ,0)) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(TRUE,TRUE,FALSE)) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"Y\", \"N\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"y\", \"n\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) #' #' tibble(ind_grad = c(\"yes\", \"no\")) %>% #'   mutate(cat_grad  = ind_recode(ind_grad)) ind_recode <- function(var, var_prefix = \"ind_\", negator = \"not\",                        cat_true = NULL, cat_false = NULL, rev = FALSE){    if(is.null(cat_true)){     cat_true = deparse(substitute(var)) %>%   # use r lang in rewrite       stringr::str_remove(paste0(\"^\", var_prefix)) %>%       stringr::str_replace_all(\"_\", \" \")   }    if(is.null(cat_false)){     cat_false = paste(negator, cat_true)   }    # for yes/no case - dangerously.   if(is.character({{var}})){      my_var <- {{var}} %>% as.factor() %>% as.numeric() - 1    }else{      my_var <- {{var}}   }    if(rev){     ifelse(my_var, cat_true, cat_false) %>%       factor(levels = c(cat_true, cat_false))   }else{     ifelse(my_var, cat_true, cat_false) %>%       factor(levels = c(cat_false, cat_true))   }   }"},{"path":"/index.html","id":"readmermd-chunks-names","dir":"","previous_headings":"","what":"README.Rmd chunks names","title":"Translate from an Indicator Variables to Categorical Variables","text":"","code":"knitr::knit_code$get() |> names() #>  [1] \"setup\"                                          #>  [2] \"unnamed-chunk-1\"                                #>  [3] \"unnamed-chunk-2\"                                #>  [4] \"sqrecode\"                                       #>  [5] \"unnamed-chunk-3\"                                #>  [6] \"introduce_ind2cat\"                              #>  [7] \"unnamed-chunk-4\"                                #>  [8] \"unnamed-chunk-5\"                                #>  [9] \"manipulation_status_quo\"                        #> [10] \"visual_status_quo\"                              #> [11] \"visual_status_quo_order\"                        #> [12] \"direct_table_awkward\"                           #> [13] \"direct_table_loss\"                              #> [14] \"direct_visual_awkward\"                          #> [15] \"direct_visual_loss\"                             #> [16] \"manipulation_status_quo_reprise\"                #> [17] \"manipulation_ind2cat\"                           #> [18] \"manipulation_ind2cat_custom\"                    #> [19] \"manipulation_ind2cat_negator\"                   #> [20] \"manipulation_ind2cat_false_cat\"                 #> [21] \"manipulation_ind2cat_rev\"                       #> [22] \"manipulation_ind2cat_prefix\"                    #> [23] \"visual_ind2cat_customization_in_visualizations\" #> [24] \"table_ind2cat_preserves\"                        #> [25] \"read_in_function\"                               #> [26] \"display_function\"                               #> [27] \"get_chunk_names\""},{"path":"/reference/ind_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"ind_recode — ind_recode","title":"ind_recode — ind_recode","text":"ind_recode","code":""},{"path":"/reference/ind_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ind_recode — ind_recode","text":"","code":"ind_recode(   var,   var_prefix = \"ind_\",   negator = \"not\",   cat_true = NULL,   cat_false = NULL,   rev = FALSE )"},{"path":"/reference/ind_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ind_recode — ind_recode","text":"var name indicator variable var_prefix character string ignored creating categorical variable negator character string used create cat_false cat_false NULL, default '' cat_true character string string used place  T/1/\"Yes\" categorical variable output, NULL category automatically generated variable name cat_false character string string used place  F/0/\"\" categorical variable output, NULL category automatically generated cat true negator rev logical indicating order reversed F/T ordering indicator source variable, default FALSE","code":""},{"path":"/reference/ind_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ind_recode — ind_recode","text":"","code":"library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union tibble(ind_grad = c(0,0,1,1,1 ,0 ,0)) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 7 × 2 #>   ind_grad cat_grad #>      <dbl> <fct>    #> 1        0 not grad #> 2        0 not grad #> 3        1 grad     #> 4        1 grad     #> 5        1 grad     #> 6        0 not grad #> 7        0 not grad  tibble(ind_grad = c(TRUE,TRUE,FALSE)) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 3 × 2 #>   ind_grad cat_grad #>   <lgl>    <fct>    #> 1 TRUE     grad     #> 2 TRUE     grad     #> 3 FALSE    not grad  tibble(ind_grad = c(\"Y\", \"N\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 Y        grad     #> 2 N        not grad  tibble(ind_grad = c(\"y\", \"n\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 y        grad     #> 2 n        not grad  tibble(ind_grad = c(\"yes\", \"no\")) %>%   mutate(cat_grad  = ind_recode(ind_grad)) #> # A tibble: 2 × 2 #>   ind_grad cat_grad #>   <chr>    <fct>    #> 1 yes      grad     #> 2 no       not grad"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
